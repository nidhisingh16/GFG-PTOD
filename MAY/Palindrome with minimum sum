class Solution:
    def PossibleToMakePalindrome(self, s: str) -> bool:
        N = len(s)
        for i in range(N // 2):
            if s[i] != '?' and s[N - i - 1] != '?' and s[i] != s[N - i - 1]:
                return False
        return True

    def minimumSum(self, s: str) -> int:
        if not self.PossibleToMakePalindrome(s):
            return -1

        N = len(s)
        for i in range(N // 2):
            if s[i] == '?' and s[N - i - 1] != '?':
                s = s[:i] + s[N - i - 1] + s[i + 1:]
            elif s[i] != '?' and s[N - i - 1] == '?':
                s = s[:N - i - 1] + s[i] + s[N - i:]

        NextChar = []
        i = 0
        while i < N:
            if s[i] != '?':
                NextChar.append(s[i])
                i += 1
            else:
                if len(NextChar) >= 1:
                    while i < N and s[i] == '?':
                        s = s[:i] + NextChar[-1] + s[i + 1:]
                        i += 1
                    NextChar.pop()
                else:
                    i += 1

        NextChar = []
        i = N - 1
        while i >= 0:
            if s[i] != '?':
                NextChar.append(s[i])
                i -= 1
            else:
                if len(NextChar) >= 1:
                    while i >= 0 and s[i] == '?':
                        s = s[:i] + NextChar[-1] + s[i + 1:]
                        i -= 1
                    NextChar.pop()
                else:
                    i -= 1

        for i in range(N // 2):
            if s[i] == '?' and s[N - i - 1] != '?':
                s = s[:i] + s[N - i - 1] + s[i + 1:]
            elif s[i] != '?' and s[N - i - 1] == '?':
                s = s[:N - i - 1] + s[i] + s[N - i:]

        s = s.replace('?', 'a')
        Ans = 0
        for i in range(N - 1):
            o = ord(s[i]) - ord('a')
            l = ord(s[i + 1]) - ord('a')
            Ans += abs(o - l)
        return Ans
