#Back-end complete function Template for Python 3

class Solution:
    # DFS Traversal to find the count of
    # island surrounded by water
    def dfs(self, matrix, visited, x, y, n, m, hasCornerCell):
    
        # If the land is already visited
        # or there is no land or the
        # coordinates gone out of matrix
        # break function as there
        # will be no islands
        if (x < 0 or y < 0 or x >= n or y >= m or visited[x][y] == True or matrix[x][y] == 0):
            return
        
        if (x == 0 or y == 0 or x == n - 1 or y == m - 1):
            if (matrix[x][y] == 1):
                hasCornerCell[0] = True
        
        # Mark land as visited
        visited[x][y] = True
        
        # Traverse to all adjacent elements
        self.dfs(matrix, visited, x + 1, y, n, m, hasCornerCell)
        self.dfs(matrix, visited, x, y + 1, n, m, hasCornerCell)
        self.dfs(matrix, visited, x - 1, y, n, m, hasCornerCell)
        self.dfs(matrix, visited, x, y - 1, n, m, hasCornerCell)
    
    def closedIslands(self, matrix, n, m):
        # Create boolean 2D visited matrix
        # to keep track of visited cell
        
        # Initially all elements are
        # unvisited.
        visited = [[False for i in range(m)] for j in range(n)]
        result = 0
        
        # Mark visited all lands
        # that are reachable from edge
        for i in range(n):
            for j in range(m):
                if ((i != 0 and j != 0 and i != n - 1 and j != m - 1) and matrix[i][j] == 1 and visited[i][j] == False):
                
                    # Determine if the island is closed
                    hasCornerCell = [False]
                    
                    # hasCornerCell will be updated to
                    # true while DFS traversal if there
                    # is a cell with value '1' on the corner
                    self.dfs(matrix, visited, i, j, n, m, hasCornerCell)
                    
                    # If the island is closed
                    if (not hasCornerCell[0]):
                        result = result + 1
        
        # Return the final count
        return result
